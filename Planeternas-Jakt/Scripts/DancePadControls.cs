//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DancePadControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DancePadControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DancePadControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DancePadControls"",
    ""maps"": [
        {
            ""name"": ""DancePad"",
            ""id"": ""48bfd872-72e2-46dc-a118-3c908ce67370"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""81fde706-bf71-4a14-8963-ea3a766997d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""55d50fa9-cc1e-4731-8853-7c49efc9c01f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7239df92-cac4-4d50-9155-aebd0dbcfedf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""1f031983-d79b-40dc-93ca-2c84e05e242f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1849977-afaa-4631-9c89-4e46d139bdbb"",
                    ""path"": ""<HID::www.l-tek.pl L-TEK Dance Pad PRO>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdebc58e-a4cd-45b1-99c4-41c6c2538c46"",
                    ""path"": ""<HID::www.l-tek.pl L-TEK Dance Pad PRO>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a006269-faeb-44dc-95a3-6134531fbed9"",
                    ""path"": ""<HID::www.l-tek.pl L-TEK Dance Pad PRO>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a53d2394-f8c5-48b1-9c83-65e81126c46e"",
                    ""path"": ""<HID::www.l-tek.pl L-TEK Dance Pad PRO>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DancePad
        m_DancePad = asset.FindActionMap("DancePad", throwIfNotFound: true);
        m_DancePad_MoveUp = m_DancePad.FindAction("MoveUp", throwIfNotFound: true);
        m_DancePad_MoveDown = m_DancePad.FindAction("MoveDown", throwIfNotFound: true);
        m_DancePad_MoveLeft = m_DancePad.FindAction("MoveLeft", throwIfNotFound: true);
        m_DancePad_MoveRight = m_DancePad.FindAction("MoveRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DancePad
    private readonly InputActionMap m_DancePad;
    private List<IDancePadActions> m_DancePadActionsCallbackInterfaces = new List<IDancePadActions>();
    private readonly InputAction m_DancePad_MoveUp;
    private readonly InputAction m_DancePad_MoveDown;
    private readonly InputAction m_DancePad_MoveLeft;
    private readonly InputAction m_DancePad_MoveRight;
    public struct DancePadActions
    {
        private @DancePadControls m_Wrapper;
        public DancePadActions(@DancePadControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_DancePad_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_DancePad_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_DancePad_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_DancePad_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_DancePad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DancePadActions set) { return set.Get(); }
        public void AddCallbacks(IDancePadActions instance)
        {
            if (instance == null || m_Wrapper.m_DancePadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DancePadActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IDancePadActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IDancePadActions instance)
        {
            if (m_Wrapper.m_DancePadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDancePadActions instance)
        {
            foreach (var item in m_Wrapper.m_DancePadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DancePadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DancePadActions @DancePad => new DancePadActions(this);
    public interface IDancePadActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
}
